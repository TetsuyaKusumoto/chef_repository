# socketに流す。リバースプロキシ設定。puma等と同じにする必要あり。
upstream sample-app {
  # railsとsocket通信するファイル、サーバーと思って後ろに投げるだけ。
  # rails側がこのファイルをウォッチする
  server unix:<%= node['nginx']['sock'] %>;
}

server {
  listen <%= node['nginx']['port'] %>;
  # serverのホスト名
  server_name <= node['nginx']['server_name'] %>;
  # rootディレクトリ
  root <%= node['nginx']['root_dir']/node['nginx']['app'] %>;
  access_log <%= node['nginx']['log_dir']/node['nginx']['app']_access.log %>;
  error_log <%= node['nginx']['log_dir']/node['nginx']['app']_error.log %>;
  client_max_body_size <%= node['nginx']['client_max_body_size'] %>;
  error_page 404 /404.html;
  error_page 500 502 503 504 /500.html;

  # index, uriのファイルがあればuriを返し、なければappを返す
  try_files $uri/index.html $uri @app;

  # locationはuriごとの設定
  # @は内部リダイレクトの時に使う
  # appは下記
  location @app {
     proxy_set_header X-Real-IP $remote_addr;
     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
     # ヘッダ書き換え
     proxy_set_header Host $http_host;
     # upstreamブロックのバックエンドにリクエストを中継。なので、sample-app
     proxy_pass http://sample-app;
  }

  # assets
  location /assets/ {
    expires 1y;
    add_header Cache-Control public;
    add_header ETag "";
  # gtip
    gzip_vary on;
    gzip_static on;
  }
}
  
